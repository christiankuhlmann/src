
#ifndef HEADER_BEAN_BOI_SENSORS

#include <ArduinoEigen.h>
#include <ArduinoEigenDense.h>
#include <ArduinoEigenSparse.h>
using namespace Eigen;

#define SAMPLES_PER_ORIENTATION 25
#define ORIENTATIONS 12
#define N_CALIB ORIENTATIONS*SAMPLES_PER_ORIENTATION
#define N_ALIGNMENT 8
#define SAMPLES_PER_READING 5


class InertialSensor
{
private:
    Matrix<float,3,N_CALIB> calibration_data;
    Matrix3f calibration_matrix;
    Vector3f calibration_offset;
    Vector3f calibrated_data;
    int calib_num;

protected:
    Vector3f raw_data;

public:
    // Adds a sample of raw_data to the pool of calibration data, returns 0 for uncalibrated, returns 1 for calibrated
    bool ColectCalibrationSample();
    // Calibrates the sensor
    void CalibrateLinear();  
    // Returns the raw data generated by the sensor
    virtual Vector3f GetRawData() = 0;
    // Returns thre value of the sensor after caloibration but before alignment
    Vector3f GetCalibratedData();
    // Reset calibration data
    void ResetCalibration();
};

class LaserSensor
{
public:
    // Initialise lidar module
    virtual void init()=0;

    // Get lidar mesaurement
    virtual float get_measurement()=0;

    // Toggle laser
    virtual void toggle_laser()=0;
};

class SensorHandler
{
private:
    Matrix3f alignment_matrix; // Alignment matrix to apply to magnetometer
    InertialSensor* accelerometer; // Connection to accelerometer sensor
    InertialSensor* magnetometer; // Connection to magnetometer sensor
    LaserSensor* laser; // Connection to LIDAR sensor
    Matrix<float,7,N_ALIGNMENT> alignment_data; // Alignment data, mag, accel, dist
    float alignment_progress;

public:
    // Takes a measurement using all 3 sensors. Value returned is Vector3d(Heading, Inclination, Distace)
    Vector3f get_measurement();

    // Calibrate the inertial sensors - accelerometer and magnetometer
    void CalibrateInertial();

    // llign the inrtial sensors
    void AlignInertial();

    // Align inertial sensor with laser rangefinder
    bool AlignLaser();   

    // Collect 1 sample of data for inertial sensors as part of the calibration procedure
    bool CollectCalibrationData(); 

    void SensorHandler::ResetCalibration()
};

#endif